//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace NewAngular.Models
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class AngularUnitEntities : DbContext
    {
        public AngularUnitEntities()
            : base("name=AngularUnitEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<Item> Items { get; set; }
    
        public virtual ObjectResult<Item> InsertData(string csgroup, string code, string name, Nullable<int> qty, Nullable<int> price)
        {
            var csgroupParameter = csgroup != null ?
                new ObjectParameter("Csgroup", csgroup) :
                new ObjectParameter("Csgroup", typeof(string));
    
            var codeParameter = code != null ?
                new ObjectParameter("Code", code) :
                new ObjectParameter("Code", typeof(string));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var qtyParameter = qty.HasValue ?
                new ObjectParameter("Qty", qty) :
                new ObjectParameter("Qty", typeof(int));
    
            var priceParameter = price.HasValue ?
                new ObjectParameter("Price", price) :
                new ObjectParameter("Price", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Item>("InsertData", csgroupParameter, codeParameter, nameParameter, qtyParameter, priceParameter);
        }
    
        public virtual ObjectResult<Item> InsertData(string csgroup, string code, string name, Nullable<int> qty, Nullable<int> price, MergeOption mergeOption)
        {
            var csgroupParameter = csgroup != null ?
                new ObjectParameter("Csgroup", csgroup) :
                new ObjectParameter("Csgroup", typeof(string));
    
            var codeParameter = code != null ?
                new ObjectParameter("Code", code) :
                new ObjectParameter("Code", typeof(string));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var qtyParameter = qty.HasValue ?
                new ObjectParameter("Qty", qty) :
                new ObjectParameter("Qty", typeof(int));
    
            var priceParameter = price.HasValue ?
                new ObjectParameter("Price", price) :
                new ObjectParameter("Price", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Item>("InsertData", mergeOption, csgroupParameter, codeParameter, nameParameter, qtyParameter, priceParameter);
        }
    
        public virtual ObjectResult<Item> ShowData()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Item>("ShowData");
        }
    
        public virtual ObjectResult<Item> ShowData(MergeOption mergeOption)
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Item>("ShowData", mergeOption);
        }
    }
}
